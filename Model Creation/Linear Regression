# import the regression model
import numpy as np
from matplotlib import pyplot as plt
from sklearn.linear_model import LinearRegression
reg = LinearRegression()                                      # create model

# use a single feature (apache score)
# note: remove the reshape if fitting to >1 input variable
X = df['col_name'].values.reshape(-1, 1)
y = df['col_name'].values


reg = reg.fit(X, y)                                           # fit the model to our data

# get the y values
buffer = 0.2*max(X)
X_fit = np.linspace(min(X) - buffer, max(X) + buffer, num=50)
y_fit = reg.predict(X_fit)                                    # The actual prediction code

# plot
plt.scatter(X, y,  color='black', marker = 'x')               # the red line is calculated to minimize the error between the line and the points
plt.plot(X_fit, y_fit, color='red', linewidth=2)
plt.show()

##################### Optional
## SIGMOID FUNCTION (aka Logistic Function)
# This function gives an 's' shaped curve from taking the dat aand mapping it into a value between 0-1, making them logisitc values

def sigmoid(x, k=0.1):              #Sigmoid function. Adjust k to set slope.
    s = 1 / (1 + np.exp(-x / k)) 
    return s

# set range of values for x
x = np.linspace(-1, 1, 50)

plt.plot(x, sigmoid(x))
plt.show()
